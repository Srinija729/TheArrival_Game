import random
import tkinter
from tkinter import *
from tkinter import messagebox


class GuessTheCode:
    def __init__(self, master):
        # creating the master
        self.master = master
        master.title("The Arrival")

        self.code = []
        # declaring the image files
        global image1
        global image2
        global image3
        global image4
        global image5
        global image6
        global image7
        global image8

        image1 = PhotoImage(file=r"/Users/srinija/Desktop/Srinija/Srishti - B.Des HCD/Year 2/S1C1 - PDTP/A3_FinalProject/s1.png")
        image2 = PhotoImage(file=r"/Users/srinija/Desktop/Srinija/Srishti - B.Des HCD/Year 2/S1C1 - PDTP/A3_FinalProject/s2.png")
        image3 = PhotoImage(file=r"/Users/srinija/Desktop/Srinija/Srishti - B.Des HCD/Year 2/S1C1 - PDTP/A3_FinalProject/s3.png")
        image4 = PhotoImage(file=r"/Users/srinija/Desktop/Srinija/Srishti - B.Des HCD/Year 2/S1C1 - PDTP/A3_FinalProject/s4.png")
        image5 = PhotoImage(file=r"/Users/srinija/Desktop/Srinija/Srishti - B.Des HCD/Year 2/S1C1 - PDTP/A3_FinalProject/s5.png")
        image6 = PhotoImage(file=r"/Users/srinija/Desktop/Srinija/Srishti - B.Des HCD/Year 2/S1C1 - PDTP/A3_FinalProject/s6.png")
        image7 = PhotoImage(file=r"/Users/srinija/Desktop/Srinija/Srishti - B.Des HCD/Year 2/S1C1 - PDTP/A3_FinalProject/s7.png")
        image8 = PhotoImage(file=r"/Users/srinija/Desktop/Srinija/Srishti - B.Des HCD/Year 2/S1C1 - PDTP/A3_FinalProject/s8.png")

        # generating the random code/ computer pattern
        for i in range(0, 5):
            num = random.randint(1, 8)
            self.code.append(str(num))
            # print(self.code)  # run this to see the code generated by the computer
        #  initialising
        self.guess = None
        self.user_code = []
        self.checker = []
        self.num_guesses = 10   # total chances
        self.message = "Guess the code:"
        self.label_text = StringVar()
        self.label_text.set(self.message)
        self.label = Label(master, textvariable=self.label_text)

        # entry field and validation
        vcmd = master.register(self.validate)  # we have to wrap the command
        self.entry = Entry(master, validate="key", validatecommand=(vcmd, '%P'))

        # display box message checking variable declaration
        self.message_check1 = True
        self.message_check2 = True
        self.message_check3 = True

        # creating labels that display text to the users about the code entered by them
        self.val_lbl1 = Label(master, borderwidth=1, relief="groove")
        self.val_lbl2 = Label(master, borderwidth=1, relief="groove")
        self.val_lbl3 = Label(master, borderwidth=1, relief="groove")
        self.val_lbl4 = Label(master, borderwidth=1, relief="groove")
        self.val_lbl5 = Label(master, borderwidth=1, relief="groove")
        self.val_disp_lbl1 = Label(master, text="Blank 1:", borderwidth=1, relief="groove")
        self.val_disp_lbl2 = Label(master, text="Blank 2:", borderwidth=1, relief="groove")
        self.val_disp_lbl3 = Label(master, text="Blank 3:", borderwidth=1, relief="groove")
        self.val_disp_lbl4 = Label(master, text="Blank 4:", borderwidth=1, relief="groove")
        self.val_disp_lbl5 = Label(master, text="Blank 5:", borderwidth=1, relief="groove")
        self.dummy_lbl = Label(master, text="symbols:")
        self.entry_lbl = Label(master, text="Enter 5 digit code:")

        # creating dummy labels, just for display of text on the interface
        self.dummylbl1 = Label(master, text="1")
        self.dummylbl2 = Label(master, text="2")
        self.dummylbl3 = Label(master, text="3")
        self.dummylbl4 = Label(master, text="4")
        self.dummylbl5 = Label(master, text="5")
        self.dummylbl6 = Label(master, text="6")
        self.dummylbl7 = Label(master, text="7")
        self.dummylbl8 = Label(master, text="8")
        self.dummylbl9 = Label(master, text="For the value you entered:")

        # creating buttons
        self.disp_btn1 = Button(master, height=100, width=100, image=image1, command=lambda: self.update("1"))
        self.disp_btn2 = Button(master, height=100, width=100, image=image2, command=lambda: self.update("2"))
        self.disp_btn3 = Button(master, height=100, width=100, image=image3, command=lambda: self.update("3"))
        self.disp_btn4 = Button(master, height=100, width=100, image=image4, command=lambda: self.update("4"))
        self.disp_btn5 = Button(master, height=100, width=100, image=image5, command=lambda: self.update("5"))
        self.disp_btn6 = Button(master, height=100, width=100, image=image6, command=lambda: self.update("6"))
        self.disp_btn7 = Button(master, height=100, width=100, image=image7, command=lambda: self.update("7"))
        self.disp_btn8 = Button(master, height=100, width=100, image=image8, command=lambda: self.update("8"))

        # creating function buttons
        self.guess_button = Button(master, text="GUESS", command=self.guess_number)
        self.reset_button = Button(master, text="Play again", command=self.reset, state=DISABLED)
        self.clear_button = Button(master, text="Clear", command=self.clearEntry)

        self.label.grid(row=0, column=0, columnspan=5, sticky=W + E)
        self.entry.grid(row=1, column=2, columnspan=3, sticky=W + E)

        # setting up the layout of widgets in the grid
        self.disp_btn1.grid(row=3, column=1)
        self.disp_btn2.grid(row=3, column=2)
        self.disp_btn3.grid(row=3, column=3)
        self.disp_btn4.grid(row=3, column=4)
        self.disp_btn5.grid(row=5, column=1)
        self.disp_btn6.grid(row=5, column=2)
        self.disp_btn7.grid(row=5, column=3)
        self.disp_btn8.grid(row=5, column=4)

        self.dummylbl1.grid(row=2, column=1, columnspan=1, sticky=W + E)
        self.dummylbl2.grid(row=2, column=2, columnspan=1, sticky=W + E)
        self.dummylbl3.grid(row=2, column=3, columnspan=1, sticky=W + E)
        self.dummylbl4.grid(row=2, column=4, columnspan=1, sticky=W + E)
        self.dummylbl5.grid(row=4, column=1, columnspan=1, sticky=W + E)
        self.dummylbl6.grid(row=4, column=2, columnspan=1, sticky=W + E)
        self.dummylbl7.grid(row=4, column=3, columnspan=1, sticky=W + E)
        self.dummylbl8.grid(row=4, column=4, columnspan=1, sticky=W + E)
        self.dummylbl9.grid(row=7, column=0, columnspan=2, sticky=W + E)

        self.entry_lbl.grid(row=1, column=0, columnspan=2)
        self.dummy_lbl.grid(row=2, column=0, rowspan=4)

        self.val_disp_lbl1.grid(row=8, column=0)
        self.val_disp_lbl2.grid(row=9, column=0)
        self.val_disp_lbl3.grid(row=10, column=0)
        self.val_disp_lbl4.grid(row=11, column=0)
        self.val_disp_lbl5.grid(row=12, column=0)

        self.val_lbl1.grid(row=8, column=1, columnspan=1, sticky=W + E)
        self.val_lbl2.grid(row=9, column=1, columnspan=1, sticky=W + E)
        self.val_lbl3.grid(row=10, column=1, columnspan=1, sticky=W + E)
        self.val_lbl4.grid(row=11, column=1, columnspan=1, sticky=W + E)
        self.val_lbl5.grid(row=12, column=1, columnspan=1, sticky=W + E)

        self.guess_button.grid(row=7, column=3, columnspan=2, rowspan=2, sticky=N + E + W + S)
        self.clear_button.grid(row=9, column=3, columnspan=2, rowspan=2, sticky=N + E + W + S)
        self.reset_button.grid(row=11, column=3, columnspan=2, rowspan=2, sticky=N + E + W + S)

    # defining functions
    # update: when symbol button is clicked, what to do
    def update(self, new_text):
        guess = int(new_text)
        self.guess = guess
        self.user_code.append(new_text)
        self.output = ''.join(self.user_code)
        self.entry.delete(0, tkinter.END)
        self.entry.insert(0, str(self.output))
        return True

    # clear: to clear entry field
    def clearEntry(self):
        self.entry.delete(0, tkinter.END)
        self.user_code.clear()

    # validate: to validate the entry field text
    def validate(self, new_text):
        if not new_text:  # the field is being cleared
            self.guess = None
            return True
        try:
            guess = int(new_text)
            if guess >= 1 and guess <= 88888:
                self.guess = guess
                self.user_code = list(str(self.guess))
                print(self.user_code)
                return True
            else:
                return False
        except ValueError:
            return False

    # defining the game
    def guess_number(self):
        self.num_guesses -= 1   # decrementing value for each round

        if self.guess is None:
            self.message = "Guess the code: "
        else:
            for i in range(0, 5):   # for 5 blanks
                if self.user_code[i] in self.code:  # if guessed code is there in the generated code
                    if self.user_code[i] == self.code[i]:   # if the codes are equal
                        if i == 0:
                            self.val_lbl1.configure(text='Right value')
                            self.checker.append('0')
                        if i == 1:
                            self.val_lbl2.configure(text='Right value')
                            self.checker.append('0')
                        if i == 2:
                            self.val_lbl3.configure(text='Right value')
                            self.checker.append('0')
                        if i == 3:
                            self.val_lbl4.configure(text='Right value')
                            self.checker.append('0')
                        if i == 4:
                            self.val_lbl5.configure(text='Right value')
                            self.checker.append('0')
                        suffix = '' if self.num_guesses == 1 else 'es'
                        self.message = "Congratulations! You guessed the number with %d guess%s left." % (
                            self.num_guesses, suffix)
                        self.guess_button.configure(state=DISABLED)
                        self.reset_button.configure(state=NORMAL)
                        self.label_text.set(self.message)
                    else:   # if guessed code in generated code, but order does not match
                        if i == 0:
                            self.val_lbl1.configure(text='Close! Change order')
                            self.checker.append('1')
                        if i == 1:
                            self.val_lbl2.configure(text='Close! Change order')
                            self.checker.append('1')
                        if i == 2:
                            self.val_lbl3.configure(text='Close! Change order')
                            self.checker.append('1')
                        if i == 3:
                            self.val_lbl4.configure(text='Close! Change order')
                            self.checker.append('1')
                        if i == 4:
                            self.val_lbl5.configure(text='Close! Change order')
                            self.checker.append('1')
                        self.message = "Guess the code:"
                        self.guess_button.configure(state=NORMAL)
                        self.reset_button.configure(state=DISABLED)
                        self.label_text.set(self.message)
                else:   # if guessed code is not in generated code
                    if i == 0:
                        self.val_lbl1.configure(text='No, incorrect')
                        self.checker.append('2')
                    if i == 1:
                        self.val_lbl2.configure(text='No, incorrect')
                        self.checker.append('2')
                    if i == 2:
                        self.val_lbl3.configure(text='No, incorrect')
                        self.checker.append('2')
                    if i == 3:
                        self.val_lbl4.configure(text='No, incorrect')
                        self.checker.append('2')
                    if i == 4:
                        self.val_lbl5.configure(text='No, incorrect')
                        self.checker.append('2')
                    self.message = "Guess the code:"
                    self.guess_button.configure(state=NORMAL)
                    self.reset_button.configure(state=DISABLED)
                    self.label_text.set(self.message)
            # print(self.checker)
            #  checking for right, wrong, and close values
            if self.checker.count('0') != 5:
                if self.checker.count('0') == 3:    # if 3 blanks are right
                    if (self.message_check1 is True) and self.num_guesses >= 2:
                        self.num_guesses = 2
                        self.display = messagebox.showinfo("Strike",'The general has moved up the date for the strike on the aliens. '
                                                                    'Hurry up and guess the code before the strike begins. '
                                                                    'You have only two more chances to guess the code.')
                        self.message_check1 = False

                elif self.checker.count('0') == 2:  # if 2 blanks are right
                    if self.message_check2 is True and self.num_guesses >= 3:
                        for j in range(0, 4):
                            if self.checker[j] == self.checker[j + 1] == '0':   # if 2 consequitive blanks are right
                                if messagebox.askyesno("Strike", 'Language is the key to how we percieve things. As you become the master of this alien language, '
                                                                 'you gain the power to perceive time as a non linear entity. '
                                                                 'As a result, you gain the ability to look into your future.'
                                                                 'If you had the chance, will you want to see your future?'):
                                    self.num_guesses = 3
                                print(self.num_guesses)
                                self.clue = ''
                                if j == 0:
                                    self.blank_num = 3
                                    self.clue = str(self.code[2])
                                elif j == 1:
                                    self.blank_num = 4
                                    self.clue = str(self.code[3])
                                elif j == 2:
                                    self.blank_num = 5
                                    self.clue = str(self.code[4])
                                elif j == 3:
                                    self.blank_num = 1
                                    self.clue = str(self.code[0])
                                if self.num_guesses == 3:
                                    self.display = messagebox.showinfo('Future', "Clue for blank%d is %s" % (
                                    self.blank_num, self.clue))
                                    self.display = messagebox.showinfo("Consequences", "You now have only 3 chances to guess the code.")
                                break
                        self.message_check2 = False

                elif self.checker.count('0') == 1:  # if 1 blank is right
                    if self.message_check3 is True and self.num_guesses >= 4:
                        if self.num_guesses <= 7:
                            self.num_guesses = 4
                            self.display = messagebox.showinfo("strike", 'The chinese government has gone radio silent. '
                                                                         'Figure out the complete code in four turns in order to prevent war.')
                            self.message_check3 = False

            else:   # if all blanks are right
                suffix = '' if self.num_guesses == 1 else 'es'
                self.message = "Congratulations! You guessed the number with %d guess%s left." % (
                    self.num_guesses, suffix)
                self.guess_button.configure(state=DISABLED)
                self.reset_button.configure(state=NORMAL)
                self.label_text.set(self.message)
                self.num_guesses = 0
            self.checker.clear()

        if self.num_guesses == 0:   # if chances are over before guessing the right code
            self.display = messagebox.showinfo("end", "GAME OVER")
            self.message = "Game over"
            self.guess_button.configure(state=DISABLED)
            self.reset_button.configure(state=NORMAL)
            self.label_text.set(self.message)

    # resetting parameters for next round
    def reset(self):
        self.entry.delete(0, END)
        self.code = []
        for i in range(0, 5):
            num = random.randint(1, 8)
            self.code.append(str(num))
            print(self.code)
        self.guess = None
        self.user_code = []
        self.checker = []
        self.num_guesses = 10

        self.message = "Guess the code:"
        self.label_text.set(self.message)

        self.val_lbl1.configure(text="")
        self.val_lbl2.configure(text="")
        self.val_lbl3.configure(text="")
        self.val_lbl4.configure(text="")
        self.val_lbl5.configure(text="")

        self.guess_button.configure(state=NORMAL)
        self.reset_button.configure(state=DISABLED)


# running the module
root = Tk()
my_gui = GuessTheCode(root)
root.mainloop()
